#!/usr/bin/env node
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var path = __webpack_require__(1);
var fs = __webpack_require__(4);
var process = __webpack_require__(2);
var glob = __webpack_require__(5);
var currentPaths = __dirname.split(path.sep);
var cwdPaths = process.cwd();
function findup(filename) {
    var n = currentPaths.length;
    while (n--) {
        var folder = currentPaths.slice(0, n).join(path.sep);
        var file = path.join(folder, filename);
        try {
            var stats = fs.statSync(file);
            if (stats.isFile()) {
                return file;
            }
        }
        catch (err) {
        }
    }
    return null;
}
exports.findup = findup;
function isDirectory(file) {
    var stats = fs.statSync(file);
    return stats.isDirectory();
}
exports.isDirectory = isDirectory;
function find(filename) {
    var file = path.join(cwdPaths, filename);
    var stats = fs.statSync(file);
    if (stats.isFile()) {
        return file;
    }
}
exports.find = find;
function load(file) {
    var contents = fs.readFileSync(file, 'utf8');
    try {
        return JSON.parse(contents);
    }
    catch (err) {
        console.error("Can not parse json from " + file + " because " + err.message);
        return null;
    }
}
exports.load = load;
function loadText(file) {
    return fs.readFileSync(file, 'utf8');
}
exports.loadText = loadText;
function saveText(file, content) {
    return fs.writeFileSync(file, content, 'utf8');
}
exports.saveText = saveText;
function expend(files) {
    var expended = [];
    if (files && files.forEach) {
        files.forEach(function (file) {
            expended = expended.concat(glob.sync(path.resolve(cwdPaths, file)));
        });
    }
    return expended;
}
exports.expend = expend;
function includesInArray(arrayList, searchElement) {
    var O = Object(arrayList);
    var len = parseInt(O.length, 10) || 0;
    if (len === 0) {
        return false;
    }
    var n = parseInt(arguments[1], 10) || 0;
    var k;
    if (n >= 0) {
        k = n;
    }
    else {
        k = len + n;
        if (k < 0) {
            k = 0;
        }
    }
    var currentElement;
    while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement ||
            (searchElement !== searchElement && currentElement !== currentElement)) {
            return true;
        }
        k++;
    }
    return false;
}
exports.includesInArray = includesInArray;
function startsWith(source, searchElement) {
    return source.indexOf(searchElement) === 0;
}
exports.startsWith = startsWith;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("process");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = __webpack_require__(12);
var ValidatorOption = (function () {
    function ValidatorOption(format, configuration) {
        this.formatter = format_1.ValidatorOutputFormat.getFormatter(format);
        this.configuration = configuration;
    }
    ValidatorOption.prototype.options = function () {
        return {
            fix: true,
            formatter: this.formatter
        };
    };
    return ValidatorOption;
}());
exports.ValidatorOption = ValidatorOption;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("glob");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("tslint");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var validator_1 = __webpack_require__(13);
var config_1 = __webpack_require__(9);
var formatter_1 = __webpack_require__(10);
function lint(opts) {
    if (opts === void 0) { opts = {}; }
    var parser = new validator_1.ValidatorConfigParser();
    var files = opts.files && opts.files.length ? opts.files : parser.files();
    var options = parser.options(opts.format || 'json');
    if (files && files.length && options) {
        var validator_2 = new validator_1.Validator(options);
        return files.map(function (file) {
            var result = validator_2.validate(file);
            if (opts.callback) {
                var stop = opts.callback(result);
                if (stop) {
                    process.exit(2);
                }
            }
            return result;
        });
    }
    return [];
}
exports.lint = lint;
function pretty(opts) {
    var fileParser = new validator_1.ValidatorConfigParser();
    var formatterConfigProvider = new config_1.FormatterConfigParser();
    var files = opts.files && opts.files.length ? opts.files : fileParser.files();
    var option = formatterConfigProvider.option();
    var formatter = new formatter_1.Formatter(option);
    if (files && files.length && formatter) {
        return files.map(function (file) {
            var formatted = formatter.format(file);
            if (formatted) {
                console.log(file, ': formatted');
            }
            return { file: file, format: formatted };
        });
    }
    return [];
}
exports.pretty = pretty;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var process = __webpack_require__(2);
var lib_1 = __webpack_require__(7);
var utils_1 = __webpack_require__(0);
var parameters = process.argv.slice(2);
var otherParameters = parameters.filter(function (p) { return !utils_1.startsWith(p, '-'); });
var isPrettyFlag = utils_1.includesInArray(parameters, '--pretty');
var isVerboseFlag = utils_1.includesInArray(parameters, '--verbose');
var files = null;
if (parseInt(process.version.match(/v(\d+)\./)[1], 10) < 4) {
    console.error('standard: Node v4 or greater is required. `standard` did not run.');
    process.exit(1);
}
if (otherParameters.length) {
    files = utils_1.expend(otherParameters);
}
var format = 'prose';
if (isPrettyFlag) {
    format = 'stylish';
}
else if (isVerboseFlag) {
    format = 'verbose';
}
var callback = function (result) {
    if (result.failureCount > 0) {
        console.log(result.output);
    }
    return false;
};
lib_1.lint({ format: format, files: files, callback: callback });
if (isPrettyFlag) {
    lib_1.pretty({ files: files });
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
var FormatterConfigParser = (function () {
    function FormatterConfigParser() {
    }
    FormatterConfigParser.prototype.option = function () {
        var defaultTSFormatConfig = utils_1.findup('tsconfig.json');
        if (!defaultTSFormatConfig) {
            return null;
        }
        var options = utils_1.load(defaultTSFormatConfig);
        return options.formatterOptions;
    };
    return FormatterConfigParser;
}());
exports.FormatterConfigParser = FormatterConfigParser;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts = __webpack_require__(16);
var path = __webpack_require__(1);
var index_1 = __webpack_require__(0);
var Formatter = (function () {
    function Formatter(option) {
        this.option = option;
        this.ruleProvider = new ts.formatting.RulesProvider();
        this.ruleProvider.ensureUpToDate(this.option);
    }
    Formatter.applyEdits = function (text, edits) {
        var result = text;
        for (var i = edits.length - 1; i >= 0; i--) {
            var change = edits[i];
            var head = result.slice(0, change.span.start);
            var tail = result.slice(change.span.start + change.span.length);
            result = head + change.newText + tail;
        }
        return result;
    };
    Formatter.prototype.format = function (file) {
        var filename = path.basename(file);
        var fileContent = index_1.loadText(file);
        var sourceFile = ts.createSourceFile(filename, fileContent, ts.ScriptTarget.Latest, true);
        var edits = ts.formatting.formatDocument(sourceFile, this.ruleProvider, this.option);
        if (edits.length) {
            var formatted = Formatter.applyEdits(fileContent, edits);
            index_1.saveText(file, formatted);
            return true;
        }
        else {
            return false;
        }
    };
    return Formatter;
}());
exports.Formatter = Formatter;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var path = __webpack_require__(1);
var glob = __webpack_require__(5);
var utils_1 = __webpack_require__(0);
var option_1 = __webpack_require__(3);
var tslint_1 = __webpack_require__(6);
var ValidatorConfigParser = (function () {
    function ValidatorConfigParser() {
    }
    ValidatorConfigParser.prototype.options = function (format) {
        var defaultTSLintOptions = utils_1.findup('tslint.json');
        if (!defaultTSLintOptions) {
            return null;
        }
        var configuration = tslint_1.Linter.loadConfigurationFromPath(defaultTSLintOptions);
        return new option_1.ValidatorOption(format, configuration);
    };
    ValidatorConfigParser.prototype.files = function () {
        var userTSConfig = utils_1.find('tsconfig.json');
        if (!userTSConfig) {
            return [];
        }
        var config = utils_1.load(userTSConfig);
        var rootDir = path.dirname(userTSConfig);
        var includes = [];
        var excludes = [];
        var excludeFiles = [];
        var excludeFolders = [];
        if (config.files && config.files.forEach) {
            config.files.forEach(function (file) {
                includes.push(path.join(rootDir, file));
            });
        }
        if (config.include && config.include.forEach) {
            config.include.forEach(function (file) {
                if (file && (file.indexOf('*') >= 0 || file.indexOf('?') >= 0)) {
                    includes = includes.concat(glob.sync(path.join(rootDir, file)));
                }
                else {
                    includes.push(path.join(rootDir, file));
                }
            });
        }
        if (config.exclude && config.exclude.forEach) {
            config.exclude.forEach(function (file) {
                if (file && (file.indexOf('*') >= 0 || file.indexOf('?') >= 0)) {
                    excludes = excludes.concat(glob.sync(path.join(rootDir, file)));
                }
                else {
                    excludes.push(path.join(rootDir, file));
                }
            });
            if (excludes.length) {
                excludeFolders = excludes.filter(function (exclude) {
                    return utils_1.isDirectory(exclude);
                }).map(function (folder) {
                    return path.join(folder, path.sep);
                });
                excludeFiles = excludes.filter(function (exclude) {
                    if (utils_1.isDirectory(exclude)) {
                        return false;
                    }
                    else {
                        var matches = excludeFolders.filter(function (folder) {
                            return utils_1.startsWith(exclude, folder);
                        });
                        return !matches.length;
                    }
                });
            }
        }
        return includes.filter(function (file) {
            if (utils_1.includesInArray(excludeFiles, file)) {
                return false;
            }
            var matches = excludeFolders.filter(function (exclude) {
                return utils_1.startsWith(file, exclude);
            });
            return !matches.length;
        });
    };
    return ValidatorConfigParser;
}());
exports.ValidatorConfigParser = ValidatorConfigParser;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ValidatorOutputFormat = (function () {
    function ValidatorOutputFormat() {
    }
    ValidatorOutputFormat.getFormatter = function (formatter) {
        if (formatter) {
            return formatter;
        }
        else {
            return 'json';
        }
    };
    return ValidatorOutputFormat;
}());
exports.ValidatorOutputFormat = ValidatorOutputFormat;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var validator_1 = __webpack_require__(15);
exports.Validator = validator_1.Validator;
var config_1 = __webpack_require__(11);
exports.ValidatorConfigParser = config_1.ValidatorConfigParser;
var option_1 = __webpack_require__(3);
exports.ValidatorOption = option_1.ValidatorOption;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ValidateResult = (function () {
    function ValidateResult(result) {
        this.failureCount = result.errorCount;
        this.failures = result.failures;
        this.format = result.format;
        this.output = result.output;
    }
    return ValidateResult;
}());
exports.ValidateResult = ValidateResult;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslint_1 = __webpack_require__(6);
var fs = __webpack_require__(4);
var result_1 = __webpack_require__(14);
var Validator = (function () {
    function Validator(validatorOption) {
        this.validatorOption = validatorOption;
    }
    Validator.prototype.validate = function (file) {
        if (!fs.existsSync(file)) {
            console.error("Unable to open file: " + file);
            process.exit(1);
        }
        var contents = fs.readFileSync(file, 'utf8');
        var linter = new tslint_1.Linter(this.validatorOption.options());
        linter.lint(file, contents, this.validatorOption.configuration);
        var results = linter.getResult();
        return new result_1.ValidateResult(results);
    };
    return Validator;
}());
exports.Validator = Validator;


/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("typescript");

/***/ })
/******/ ]);